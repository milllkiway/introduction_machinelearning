{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e08476cf-88bb-4d0f-9c4d-6d072af905a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import rdkit\n",
    "import rdkit.Chem as Chem\n",
    "import pandas as pd\n",
    "import matplotlib as plt\n",
    "import numpy as np\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77e47977-8232-4c6a-88bf-ff49f70aefd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "drugs = []\n",
    "with open(\"drugs.smi\") as fp:\n",
    "    for l in fp:\n",
    "        smiles = l.strip() \n",
    "        mol = Chem.MolFromSmiles(smiles)\n",
    "        if mol:\n",
    "            drugs.append(mol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "01d58e9b-c728-4954-8f4c-f0ed5a541fdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "600"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(drugs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc4985ed-3755-41e6-bb0d-ec4d39fb6eef",
   "metadata": {},
   "outputs": [],
   "source": [
    "from rdkit.Chem.rdMolDescriptors import CalcExactMolWt, CalcNumLipinskiHBA, CalcNumLipinskiHBD, CalcCrippenDescriptors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "db1ec9dc-88da-4d40-93ae-dc7dbac66724",
   "metadata": {},
   "outputs": [],
   "source": [
    "properties = {\"MW\":[], \"Num_HBA\": [], \"Num_HBD\": [], \"logp\": [], \"is_drug\": 1}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0a247787-b2fd-4db3-a9b3-18bb6df49d47",
   "metadata": {},
   "outputs": [],
   "source": [
    "for idx,mol in enumerate(drugs):\n",
    "    mw = CalcExactMolWt(mol) \n",
    "    properties[\"MW\"].append(mw)\n",
    "    \n",
    "    hba = CalcNumLipinskiHBA(mol)\n",
    "    properties[\"Num_HBA\"].append(hba)\n",
    "    \n",
    "    hbd = CalcNumLipinskiHBD(mol) \n",
    "    properties[\"Num_HBD\"].append(hbd)\n",
    "    \n",
    "    logp, mr = CalcCrippenDescriptors(mol) \n",
    "    properties[\"logp\"].append(logp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "266244cb-d6ab-4674-b190-3a3256d2674a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "599\n"
     ]
    }
   ],
   "source": [
    "print(idx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "05cbc87d-af11-47e0-a7a3-654040640113",
   "metadata": {},
   "outputs": [],
   "source": [
    "drugs_df=pd.DataFrame(properties)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ea4bd6c1-4629-451b-bad1-c80f7865c5cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "      <th>is_drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>315.000724</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2.63360</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>171.104799</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.89670</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1343.587801</td>\n",
       "      <td>27</td>\n",
       "      <td>15</td>\n",
       "      <td>0.92454</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>211.110947</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80390</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>204.072119</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2.14610</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>595</th>\n",
       "      <td>842.514005</td>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>2.32510</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>785.352359</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>6.15784</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>597</th>\n",
       "      <td>697.309826</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>4.75412</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>598</th>\n",
       "      <td>846.441509</td>\n",
       "      <td>15</td>\n",
       "      <td>5</td>\n",
       "      <td>4.61572</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>599</th>\n",
       "      <td>876.452073</td>\n",
       "      <td>16</td>\n",
       "      <td>6</td>\n",
       "      <td>5.64822</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>600 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              MW  Num_HBA  Num_HBD     logp  is_drug\n",
       "0     315.000724        4        1  2.63360        1\n",
       "1     171.104799        1        1  1.89670        1\n",
       "2    1343.587801       27       15  0.92454        1\n",
       "3     211.110947        3        1  1.80390        1\n",
       "4     204.072119        2        0  2.14610        1\n",
       "..           ...      ...      ...      ...      ...\n",
       "595   842.514005       16        4  2.32510        1\n",
       "596   785.352359       14        5  6.15784        1\n",
       "597   697.309826       13        6  4.75412        1\n",
       "598   846.441509       15        5  4.61572        1\n",
       "599   876.452073       16        6  5.64822        1\n",
       "\n",
       "[600 rows x 5 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drugs_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d02bbb77-af2f-42c3-bb2e-70b141ce5eb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "600"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(drugs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c5b854c9-840a-478e-8c87-96d8c155c203",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'MW'}>,\n",
       "        <AxesSubplot:title={'center':'Num_HBA'}>],\n",
       "       [<AxesSubplot:title={'center':'Num_HBD'}>,\n",
       "        <AxesSubplot:title={'center':'logp'}>],\n",
       "       [<AxesSubplot:title={'center':'is_drug'}>, <AxesSubplot:>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "drugs_df.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2462833d-48d5-4edb-9c3f-a2c377d33138",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "drugs_df.plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "559c51d3-4abb-46d4-b219-88f0bcbb6867",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'MW'}>,\n",
       "        <AxesSubplot:title={'center':'Num_HBA'}>],\n",
       "       [<AxesSubplot:title={'center':'Num_HBD'}>,\n",
       "        <AxesSubplot:title={'center':'logp'}>],\n",
       "       [<AxesSubplot:title={'center':'is_drug'}>, <AxesSubplot:>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "drugs_df.hist(figsize=(10,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e12d7ab6-0bb7-4c3b-b48e-2bad99f591bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = drugs_df[\"MW\"].plot.hist(bins=100, alpha=0.5, xlim=(0, 1000), grid=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7a4ee965-01a1-4a10-89be-95afd2f9da3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = drugs_df[\"logp\"].plot.hist(bins=100, alpha=0.5, grid=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "11b46f3e-6b5f-41db-91a5-e4e7c680d9b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "      <th>is_drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>600.000000</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>373.048343</td>\n",
       "      <td>5.848333</td>\n",
       "      <td>1.871667</td>\n",
       "      <td>3.061503</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>225.018410</td>\n",
       "      <td>5.333799</td>\n",
       "      <td>2.967582</td>\n",
       "      <td>2.139073</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>46.041865</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-11.627860</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>263.188529</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.785350</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>339.194677</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>3.073600</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>443.416526</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.219398</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4111.115377</td>\n",
       "      <td>104.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>17.853900</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                MW     Num_HBA     Num_HBD        logp  is_drug\n",
       "count   600.000000  600.000000  600.000000  600.000000    600.0\n",
       "mean    373.048343    5.848333    1.871667    3.061503      1.0\n",
       "std     225.018410    5.333799    2.967582    2.139073      0.0\n",
       "min      46.041865    1.000000    0.000000  -11.627860      1.0\n",
       "25%     263.188529    3.000000    1.000000    1.785350      1.0\n",
       "50%     339.194677    5.000000    1.500000    3.073600      1.0\n",
       "75%     443.416526    7.000000    3.000000    4.219398      1.0\n",
       "max    4111.115377  104.000000   61.000000   17.853900      1.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drugs_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b1ec4e10-5b2d-459a-93d3-aab1acef017c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[17:18:53] WARNING: not removing hydrogen atom without neighbors\n"
     ]
    }
   ],
   "source": [
    "non_drugs = []\n",
    "with open(\"non_drugs.smi\") as fp:\n",
    "    for l in fp:\n",
    "        smiles = l.strip()\n",
    "        mol = Chem.MolFromSmiles(smiles)\n",
    "        if mol:\n",
    "            non_drugs.append(mol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "61021f62-2d49-429a-95b4-9db650977fa6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "999"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(non_drugs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "d546c7b8-8ee0-4dca-a73e-32c858d0d710",
   "metadata": {},
   "outputs": [],
   "source": [
    "properties2= {\"MW\":[], \"Num_HBA\": [], \"Num_HBD\": [], \"logp\": [], \"is_drug\": 0}\n",
    "for mol in non_drugs:\n",
    "    mw = CalcExactMolWt(mol) \n",
    "    properties2[\"MW\"].append(mw)\n",
    "    \n",
    "    hba = CalcNumLipinskiHBA(mol)\n",
    "    properties2[\"Num_HBA\"].append(hba)\n",
    "    \n",
    "    hbd = CalcNumLipinskiHBD(mol) \n",
    "    properties2[\"Num_HBD\"].append(hbd)\n",
    "    \n",
    "    logp, mr = CalcCrippenDescriptors(mol) \n",
    "    properties2[\"logp\"].append(logp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "a2125a0c-33ae-4e7b-9fbc-195f7b85671d",
   "metadata": {},
   "outputs": [],
   "source": [
    "non_drugs_df = pd.DataFrame(properties2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "003301ec-98f4-4b88-a606-d8262e848d6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "999"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(non_drugs_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "e54c7a1b-074d-4daf-b82e-d158411a5a94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "      <th>is_drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>364.830076</td>\n",
       "      <td>5.250250</td>\n",
       "      <td>1.515516</td>\n",
       "      <td>3.291107</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>128.986654</td>\n",
       "      <td>2.649051</td>\n",
       "      <td>1.478473</td>\n",
       "      <td>2.063148</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>120.057515</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.993900</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>274.117944</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.147020</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>341.967375</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.158000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>424.680837</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.334760</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1250.664991</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>19.166200</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                MW     Num_HBA     Num_HBD        logp  is_drug\n",
       "count   999.000000  999.000000  999.000000  999.000000    999.0\n",
       "mean    364.830076    5.250250    1.515516    3.291107      0.0\n",
       "std     128.986654    2.649051    1.478473    2.063148      0.0\n",
       "min     120.057515    0.000000    0.000000   -3.993900      0.0\n",
       "25%     274.117944    4.000000    1.000000    2.147020      0.0\n",
       "50%     341.967375    5.000000    1.000000    3.158000      0.0\n",
       "75%     424.680837    7.000000    2.000000    4.334760      0.0\n",
       "max    1250.664991   24.000000   16.000000   19.166200      0.0"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_drugs_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "e2e76581-8cbf-44bd-9543-dd9acd63d406",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "      <th>is_drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>240.220164</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.87700</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>281.156183</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2.59610</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302.073452</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3.52380</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>282.255880</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5.66270</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>291.231063</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2.20530</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>674.298346</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>5.12654</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>437.004489</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.10954</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>375.100414</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3.70520</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1250.664991</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>19.16620</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>518.221700</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5.44250</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>999 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              MW  Num_HBA  Num_HBD      logp  is_drug\n",
       "0     240.220164        3        1   1.87700        0\n",
       "1     281.156183        4        2   2.59610        0\n",
       "2     302.073452        4        2   3.52380        0\n",
       "3     282.255880        2        0   5.66270        0\n",
       "4     291.231063        4        1   2.20530        0\n",
       "..           ...      ...      ...       ...      ...\n",
       "994   674.298346       11        6   5.12654        0\n",
       "995   437.004489        7        2   4.10954        0\n",
       "996   375.100414        5        1   3.70520        0\n",
       "997  1250.664991       14        0  19.16620        0\n",
       "998   518.221700        7        1   5.44250        0\n",
       "\n",
       "[999 rows x 5 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_drugs_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "827ea692-6fd4-41f8-b7be-88dbff1f3884",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_pd = pd.concat([drugs_df, non_drugs_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2068d374-65e3-4626-8420-0794b6bc1046",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "      <th>is_drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>315.000724</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2.63360</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>171.104799</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.89670</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1343.587801</td>\n",
       "      <td>27</td>\n",
       "      <td>15</td>\n",
       "      <td>0.92454</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>211.110947</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80390</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>204.072119</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2.14610</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>674.298346</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>5.12654</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>437.004489</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.10954</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>375.100414</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3.70520</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1250.664991</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>19.16620</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>518.221700</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5.44250</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1599 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              MW  Num_HBA  Num_HBD      logp  is_drug\n",
       "0     315.000724        4        1   2.63360        1\n",
       "1     171.104799        1        1   1.89670        1\n",
       "2    1343.587801       27       15   0.92454        1\n",
       "3     211.110947        3        1   1.80390        1\n",
       "4     204.072119        2        0   2.14610        1\n",
       "..           ...      ...      ...       ...      ...\n",
       "994   674.298346       11        6   5.12654        0\n",
       "995   437.004489        7        2   4.10954        0\n",
       "996   375.100414        5        1   3.70520        0\n",
       "997  1250.664991       14        0  19.16620        0\n",
       "998   518.221700        7        1   5.44250        0\n",
       "\n",
       "[1599 rows x 5 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "78a90d59-56b5-469e-9ce2-22f900f8747e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1599"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(all_pd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "55491e52-b4fa-4d20-a705-23c4046b5aae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              MW  Num_HBA  Num_HBD      logp  is_drug\n",
      "0     315.000724        4        1   2.63360        1\n",
      "1     171.104799        1        1   1.89670        1\n",
      "2    1343.587801       27       15   0.92454        1\n",
      "3     211.110947        3        1   1.80390        1\n",
      "4     204.072119        2        0   2.14610        1\n",
      "..           ...      ...      ...       ...      ...\n",
      "994   674.298346       11        6   5.12654        0\n",
      "995   437.004489        7        2   4.10954        0\n",
      "996   375.100414        5        1   3.70520        0\n",
      "997  1250.664991       14        0  19.16620        0\n",
      "998   518.221700        7        1   5.44250        0\n",
      "\n",
      "[1599 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "print(all_pd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "e0963238-e288-486e-b454-0500f917cf18",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = all_pd.iloc[:, :-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "a2a9eb74-3e7d-4528-8e13-93a47e9bf1ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>315.000724</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2.63360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>171.104799</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.89670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1343.587801</td>\n",
       "      <td>27</td>\n",
       "      <td>15</td>\n",
       "      <td>0.92454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>211.110947</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>204.072119</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2.14610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>674.298346</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>5.12654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>437.004489</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.10954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>375.100414</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3.70520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1250.664991</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>19.16620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>518.221700</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5.44250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1599 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              MW  Num_HBA  Num_HBD      logp\n",
       "0     315.000724        4        1   2.63360\n",
       "1     171.104799        1        1   1.89670\n",
       "2    1343.587801       27       15   0.92454\n",
       "3     211.110947        3        1   1.80390\n",
       "4     204.072119        2        0   2.14610\n",
       "..           ...      ...      ...       ...\n",
       "994   674.298346       11        6   5.12654\n",
       "995   437.004489        7        2   4.10954\n",
       "996   375.100414        5        1   3.70520\n",
       "997  1250.664991       14        0  19.16620\n",
       "998   518.221700        7        1   5.44250\n",
       "\n",
       "[1599 rows x 4 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "5017e264-cc9e-4018-a899-a9b283686aea",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = all_pd.iloc[:, -1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "656e0084-3969-420f-9766-cb700140b91d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      1\n",
       "      ..\n",
       "994    0\n",
       "995    0\n",
       "996    0\n",
       "997    0\n",
       "998    0\n",
       "Name: is_drug, Length: 1599, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "e36f5412-3b2d-4ce2-b951-d890b66981bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.model_selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "04ab477f-41cc-43de-9bdc-c51a6a0c3d93",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "a013ee0e-7186-48d2-a591-c3befef28775",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>493</th>\n",
       "      <td>305.073805</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.17960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354</th>\n",
       "      <td>208.121178</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1.16180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>247.062677</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0.53442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>182.087769</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2.13759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>243.121906</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.60240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>530</th>\n",
       "      <td>227.040485</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.07010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>694</th>\n",
       "      <td>449.117411</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>4.06930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>351.158292</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3.07648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>422.151158</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>3.04150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>526</th>\n",
       "      <td>216.099774</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0.57720</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1279 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             MW  Num_HBA  Num_HBD     logp\n",
       "493  305.073805        1        1  5.17960\n",
       "354  208.121178        4        0  1.16180\n",
       "342  247.062677        7        0  0.53442\n",
       "234  182.087769        2        1  2.13759\n",
       "105  243.121906        7        3 -1.60240\n",
       "..          ...      ...      ...      ...\n",
       "530  227.040485        2        0  4.07010\n",
       "694  449.117411        6        2  4.06930\n",
       "260  351.158292        6        0  3.07648\n",
       "859  422.151158        8        2  3.04150\n",
       "526  216.099774        5        1  0.57720\n",
       "\n",
       "[1279 rows x 4 columns]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "7b35c825-c682-4c00-89bd-22719d1dcd4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "493    1\n",
       "354    1\n",
       "342    1\n",
       "234    0\n",
       "105    0\n",
       "      ..\n",
       "530    0\n",
       "694    0\n",
       "260    0\n",
       "859    0\n",
       "526    0\n",
       "Name: is_drug, Length: 1279, dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "d8f88593-dd3e-4ec8-99bd-b7eef5b654b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>338.016057</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>-0.12410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>430.061041</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2.87958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>170.105528</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.12730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>236.928676</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1.44860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>726</th>\n",
       "      <td>453.196459</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1.36610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>659</th>\n",
       "      <td>207.071785</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2.77300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>695</th>\n",
       "      <td>224.096106</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1.23960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>555</th>\n",
       "      <td>315.183444</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3.33830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>435.005545</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4.02260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>255.129300</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2.68630</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>320 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             MW  Num_HBA  Num_HBD     logp\n",
       "203  338.016057        8        5 -0.12410\n",
       "124  430.061041        6        2  2.87958\n",
       "350  170.105528        4        2 -0.12730\n",
       "82   236.928676        3        0  1.44860\n",
       "726  453.196459        6        2  1.36610\n",
       "..          ...      ...      ...      ...\n",
       "659  207.071785        2        1  2.77300\n",
       "695  224.096106        4        2  1.23960\n",
       "555  315.183444        4        2  3.33830\n",
       "363  435.005545        4        1  4.02260\n",
       "104  255.129300        3        1  2.68630\n",
       "\n",
       "[320 rows x 4 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "eb871d26-67f6-4339-8b60-19210ff5b700",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "203    0\n",
       "124    1\n",
       "350    1\n",
       "82     0\n",
       "726    0\n",
       "      ..\n",
       "659    0\n",
       "695    0\n",
       "555    0\n",
       "363    0\n",
       "104    0\n",
       "Name: is_drug, Length: 320, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "6b4b5ae9-1e86-4ebc-9508-352718a143d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "edee15cb-3def-4b74-a201-3eb7aebb2aff",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_model = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "fadfa418-8643-42fd-b2ac-c4509ce74c8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "b4fbcae2-0c83-4f3a-8d86-c2c19befaf9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = my_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "2161ade4-7ce4-474d-84d0-6ac201d03de2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,\n",
       "       0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n",
       "       1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1,\n",
       "       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n",
       "       0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,\n",
       "       1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1,\n",
       "       0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0])"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "d4c5d62d-0cdd-4db2-84b0-fa2744782728",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "a6fcbf9e-eff9-4801-a12b-e3bbe9c78011",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5666666666666667"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precision_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "dd99a45d-9528-4b90-9510-03ff73a26c88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3953488372093023"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "b5ee1af6-d5cd-44a1-b6bd-996235ba90d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_model_v2 = RandomForestClassifier(n_estimators=200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "646b19b2-a389-4d2c-a104-a2bb36a424a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=200)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_model_v2.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ab05bd7-e230-4af6-8659-288d13d71121",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = my_model_v2.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "62a4684a-5d3f-4279-8cdf-939f1fa5070a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0\n",
      " 1 0 1 0 1 0 0 0 1 0 1 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 1\n",
      " 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0\n",
      " 0 0 0 1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0\n",
      " 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0 1 1\n",
      " 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1 1 0 0\n",
      " 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 1 0 0 1 1 0 0 0 0 1 0\n",
      " 1 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 1 1 0 1 1 0 1 0 0 0 1 0 0 0 1\n",
      " 0 0 1 0 0 0 0 1 1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0]\n"
     ]
    }
   ],
   "source": [
    "print(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "d3a3a35a-0da7-4baa-8448-47ed597cd943",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MW</th>\n",
       "      <th>Num_HBA</th>\n",
       "      <th>Num_HBD</th>\n",
       "      <th>logp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>338.016057</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>-0.12410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>430.061041</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2.87958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>170.105528</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.12730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>236.928676</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1.44860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>726</th>\n",
       "      <td>453.196459</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1.36610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>659</th>\n",
       "      <td>207.071785</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2.77300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>695</th>\n",
       "      <td>224.096106</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1.23960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>555</th>\n",
       "      <td>315.183444</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3.33830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>435.005545</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4.02260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>255.129300</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2.68630</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>320 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             MW  Num_HBA  Num_HBD     logp\n",
       "203  338.016057        8        5 -0.12410\n",
       "124  430.061041        6        2  2.87958\n",
       "350  170.105528        4        2 -0.12730\n",
       "82   236.928676        3        0  1.44860\n",
       "726  453.196459        6        2  1.36610\n",
       "..          ...      ...      ...      ...\n",
       "659  207.071785        2        1  2.77300\n",
       "695  224.096106        4        2  1.23960\n",
       "555  315.183444        4        2  3.33830\n",
       "363  435.005545        4        1  4.02260\n",
       "104  255.129300        3        1  2.68630\n",
       "\n",
       "[320 rows x 4 columns]"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "bf114e06-1294-4fb0-861c-1012e3eef83e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5666666666666667"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precision_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "125db95f-dd5a-4cb3-8c0b-d4bb43456e0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3953488372093023"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "e0934edc-a25e-49b2-ae67-fd28c5bb1a1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.46575342465753417"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "ad4cfb5b-cc5c-4113-a420-817a866ebfcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_model_v3 = RandomForestClassifier(n_estimators=500, max_depth = 5, min_samples_split = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "cc00b6f0-6ca5-41a5-a9e7-96b8c9c41437",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_depth=5, min_samples_split=5, n_estimators=500)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_model_v3.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "7b1e6782-e1fd-40f8-a5bf-4ac9778f00bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = my_model_v3.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "462dd4f1-c19e-4770-82cd-61101fc58609",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 1 0 0 0 0 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1\n",
      " 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0\n",
      " 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "print(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "eacc7c5a-177e-474d-8f30-5b5a4372fbc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6129032258064516"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precision_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "d90988eb-1b20-4e67-b97f-15590d9c31ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.14728682170542637"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fb0cee5-fdb8-47d9-a9c9-c903c3770c0b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
